１章や２章の回路は「組み合わせ回路」なので、時間という概念はなく「入力」に対して「出力」は即座に求められる。
記憶素子を用いて時間が経過しても「状態を保つ」ことを可能な「順序回路」を作成できる。
　->ハードウェアの回路上のクロック入力を用いて、回路全体の記憶素子の時刻同期を行っている。
  ->技術的にはフィードバックループを用いる。
 
データの格納：out(t)=in(t-1) -> 過去に入力された値を出力すること
データの呼び出し：out(t)=out(t-1) -> 過去と同じ値を出力すること
  どちらも常にデータを出力していることに注意！！
  データの格納と呼び出しは同一のタイミングでは実行できないことに注意。格納は格納だけ、呼び出しは呼び出しだけ。  

⭐︎回路の種類
　組み合わせ回路：出力が現時点の入力によってのみ決まる。
  順序回路：クロックによる規制を受ける。

⭐︎D型フリップフロップ(DFF)
 入力された値をそのまま出力する
  out(t)=in(t-1)
  DFFにはクロック入力が存在し、マスタクロックからの信号が常に送信される。
 
⭐︎1bitレジスタ（Bit回路）
 loadフラグが設定されていればDFFとして動作し、それ以外の場合は同じ値を出力する。
 データの「格納」と「呼び出し」を実行する。
 レジスタは「Mux->DFF+フィードバック」という構成である。
 上が「記憶素子の本質」に相当する。
 P54の図を見るとloadがあろうがなかろうが任意の時刻に対して回路としては常にinとoutが存在している。
 当然であるが「DFF」と「レジスタ」は全然別の概念である。DFFはレジスタの構成要素の一部である。

 if load(t-1) then out(t)=in(t-1)
 else out(t) = out(t-1)

⭐︎レジスタ
本質的にはBit回路と同じ。異なるのは入力と出力が多Bit値を扱えるようになっている点。

⭐︎メモリ（RAM）
レスジタの積み重ね。レジスタやDFFと異なる点はアドレスという概念が存在すること。
メモリの幅：各ワードがいくつのレジスタから構成されるか。一般的には32bitもしくは64bitである。（こちらは横）
メモリのサイズ：RAMに存在するワードの個数。（こちらは縦）
